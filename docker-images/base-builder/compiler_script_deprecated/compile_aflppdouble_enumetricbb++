#!/bin/bash -eu
# Copyright 2016 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################

# If LLVM once again does weird changes then enable this:
#export AFL_LLVM_INSTRUMENT=LLVM-NATIVE

# AFL++ setup
echo "Copying precompiled AFL++"

# Copy AFLppDoubleMap tools necessary for fuzzing.
pushd $SRC/AFLppDoubleMap > /dev/null

cp -f libAFLDriver.a $LIB_FUZZING_ENGINE

# Some important projects include libraries, copy those even when they don't
# start with "afl-". Use "sort -u" to avoid a warning about duplicates.
ls afl-* *.txt *.a *.o *.so | sort -u | xargs cp -t $OUT

export ENUMETRIC=1
export TRANS_TYPE_CTX_BB=1

export CC="$SRC/AFLppDoubleMap/afl-clang-fast"
export CXX="$SRC/AFLppDoubleMap/afl-clang-fast++"
export CCC="$SRC/AFLppDoubleMap/afl-clang-fast++"

# Set sane AFL++ environment defaults:
# Be quiet, otherwise this can break some builds.
export AFL_QUIET=1
# No leak errors during builds.
export ASAN_OPTIONS="detect_leaks=0:symbolize=0:detect_odr_violation=0:abort_on_error=1"
# Do not abort on any problems (because this is during build where it is ok)
export AFL_IGNORE_PROBLEMS=1
# No complain on unknown AFL environment variables
export AFL_IGNORE_UNKNOWN_ENVS=1

export AFL_USE_ASAN=1
export AFL_USE_UBSAN=1

# Provide a way to document the AFL++ options used in this build:
echo
echo AFL++ target compilation setup:
env | egrep '^AFL_' | tee "$OUT/afl_options.txt"
echo

popd > /dev/null

echo " done."
echo "---------------------------------------------------------------"

sysctl -w vm.mmap_rnd_bits=28

OSS_FUZZ_ON_DEMAND="${OSS_FUZZ_ON_DEMAND:-0}"

if [ -z "${SANITIZER_FLAGS-}" ]; then
  FLAGS_VAR="SANITIZER_FLAGS_${SANITIZER}"
  export SANITIZER_FLAGS=${!FLAGS_VAR-}
fi

if [[ $ARCHITECTURE == "i386" ]]; then
    export CFLAGS="-m32 $CFLAGS"
    cp -R /usr/i386/lib/* /usr/local/lib
    cp -R /usr/i386/include/* /usr/local/include
fi

if [[ $SANITIZER_FLAGS = *sanitize=memory* ]]
then
  # Take all libraries from lib/msan
  # export CXXFLAGS_EXTRA="-L/usr/msan/lib $CXXFLAGS_EXTRA"
  cp -R /usr/msan/lib/* /usr/local/lib/x86_64-unknown-linux-gnu/
  cp -R /usr/msan/include/* /usr/local/include

  echo 'Building without MSan instrumented libraries.'
fi

# Coverage flag overrides.
COVERAGE_FLAGS_VAR="COVERAGE_FLAGS_${SANITIZER}"
if [[ -n ${!COVERAGE_FLAGS_VAR+x} ]]
then
  export COVERAGE_FLAGS="${!COVERAGE_FLAGS_VAR}"
fi

# Only need the default coverage instrumentation for libFuzzer or honggfuzz.
# Other engines bring their own.
if [ $FUZZING_ENGINE = "none" ] || [ $FUZZING_ENGINE = "afl" ] || [ $FUZZING_ENGINE = "centipede" ] || [ "${OSS_FUZZ_ON_DEMAND}" != "0" ]; then
  export COVERAGE_FLAGS=
fi

# Add Rust libfuzzer flags.
# See https://github.com/rust-fuzz/libfuzzer/blob/master/build.rs#L12.
export CUSTOM_LIBFUZZER_PATH="$LIB_FUZZING_ENGINE_DEPRECATED"
export CUSTOM_LIBFUZZER_STD_CXX=c++

export CFLAGS="-fsanitize=fuzzer $CFLAGS $SANITIZER_FLAGS $COVERAGE_FLAGS"
export CXXFLAGS="-fsanitize=fuzzer $CFLAGS $CXXFLAGS_EXTRA"


if [ "$SANITIZER" = "undefined" ]; then
  # Disable "function" sanitizer for C code for now, because many projects,
  # possibly via legacy C code are affected.
  # The projects should be fixed and this workaround be removed in the future.
  # TODO(#11778):
  # https://github.com/google/oss-fuzz/issues/11778
  export CFLAGS="$CFLAGS -fno-sanitize=function"
fi

# Copy latest llvm-symbolizer in $OUT for stack symbolization.
cp $(which llvm-symbolizer-13) $OUT/

echo "---------------------------------------------------------------"
echo "CC=$CC"
echo "CXX=$CXX"
echo "CFLAGS=$CFLAGS"
echo "CXXFLAGS=$CXXFLAGS"
echo "---------------------------------------------------------------"

if [ "${OSS_FUZZ_ON_DEMAND}" != "0" ]; then
  fuzzbench_build
  cp $(which llvm-symbolizer-13) $OUT/
  exit 0
fi

BUILD_CMD="bash -eux $SRC/build.sh"

# Set +u temporarily to continue even if GOPATH and OSSFUZZ_RUSTPATH are undefined.
set +u
# We need to preserve source code files for generating a code coverage report.
# We need exact files that were compiled, so copy both $SRC and $WORK dirs.
COPY_SOURCES_CMD="cp -rL --parents $SRC $WORK /usr/include /usr/local/include $GOPATH $OSSFUZZ_RUSTPATH /rustc $OUT"
set -u

if [ "${BUILD_UID-0}" -ne "0" ]; then
  adduser -u $BUILD_UID --disabled-password --gecos '' builder
  chown -R builder $SRC $OUT $WORK
  su -c "$BUILD_CMD" builder
  if [ "$SANITIZER" = "coverage" ]; then
    # Some directories have broken symlinks (e.g. honggfuzz), ignore the errors.
    su -c "$COPY_SOURCES_CMD" builder 2>/dev/null || true
  fi
else
  {
    export AFL_LLVM_CMPLOG=1
    $BUILD_CMD
    if [ "$SANITIZER" = "coverage" ]; then
      # Some directories have broken symlinks (e.g. honggfuzz), ignore the errors.
      $COPY_SOURCES_CMD 2>/dev/null || true
    fi
    touch $OUT/afl_cmplog.txt
    unset AFL_LLVM_CMPLOG
  }
  

  for binary in $(find $OUT/ -executable -type f); do
    [[ "$binary" != *.so ]] || continue
    [[ $(basename "$binary") != jazzer_driver* ]] || continue
    file "$binary" | grep -e ELF -e "shell script" > /dev/null 2>&1 || continue
    grep "LLVMFuzzerTestOneInput" "$binary" > /dev/null 2>&1 || continue

    basename "$binary"
    mv $binary $binary.cmplog
  done

  env
  {
    $BUILD_CMD
    if [ "$SANITIZER" = "coverage" ]; then
      # Some directories have broken symlinks (e.g. honggfuzz), ignore the errors.
      $COPY_SOURCES_CMD 2>/dev/null || true
    fi
  }
fi