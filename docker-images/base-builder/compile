#!/bin/bash -eu
# Copyright 2016 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################

# If LLVM once again does weird changes then enable this:
#export AFL_LLVM_INSTRUMENT=LLVM-NATIVE

# AFL++ setup
echo "Copying precompiled AFL++"

# Copy AFLppDoubleMap tools necessary for fuzzing.
pushd $SRC/AFLppDoubleMap > /dev/null

cp -f libAFLDriver.a $LIB_FUZZING_ENGINE

# Some important projects include libraries, copy those even when they don't
# start with "afl-". Use "sort -u" to avoid a warning about duplicates.
ls afl-* *.txt *.a *.o *.so | sort -u | xargs cp -t $OUT


if [ "${COMPILER:-aflpp}" == "clang" ] ; then 
    echo "Do nothing sonce clang is default"
fi
if [ "${COMPILER:-aflpp}" == "aflpp" ] ; then 
    export CC="$SRC/aflplusplus/afl-clang-fast"
    export CXX="$SRC/aflplusplus/afl-clang-fast++"
    export CCC="$SRC/aflplusplus/afl-clang-fast++"
fi
if [ "${COMPILER:-aflpp}" == "aflppdouble" ] ; then 
    export CC="$SRC/AFLppDoubleMap/afl-clang-fast"
    export CXX="$SRC/AFLppDoubleMap/afl-clang-fast++"
    export CCC="$SRC/AFLppDoubleMap/afl-clang-fast++"
fi



# Set sane AFL++ environment defaults:
# Be quiet, otherwise this can break some builds.
export AFL_QUIET=1
# No leak errors during builds.
export ASAN_OPTIONS="detect_leaks=0:symbolize=0:detect_odr_violation=0:abort_on_error=1"
# Do not abort on any problems (because this is during build where it is ok)
export AFL_IGNORE_PROBLEMS=1
# No complain on unknown AFL environment variables
export AFL_IGNORE_UNKNOWN_ENVS=1

for sanitizer in $SANITIZERS ; do
    if [ "$sanitizer" == "asan" ] ; then 
        echo "SETTING ASAN"
        if [ "${COMPILER:-aflpp}" == "none" ] ; then 
            echo " > for plain"
            # only applied on plan compilation e.g. with clang and not aflpp like
            export CFLAGS="-fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls $CFLAGS"
            export CXXFLAGS="-fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls $CFLAGS"
        else
            echo " > for aflpp-like"
            export AFL_USE_ASAN=1
        fi
    fi
    if [ "$sanitizer" == "ubsan" ] ; then 
        echo "SETTING UBSAN"
        if [ "${COMPILER:-aflpp}" == "none" ] ; then 
            echo " > for plain"
            # only applied on plan compilation e.g. with clang and not aflpp like
            export CFLAGS="-fsanitize=undefined -fno-optimize-sibling-calls $CFLAGS"
            export CXXFLAGS="-fsanitize=undefined -fno-optimize-sibling-calls $CFLAGS"
            # Disable "function" sanitizer for C code for now, because many projects,
            # possibly via legacy C code are affected.
            # The projects should be fixed and this workaround be removed in the future.
            # TODO(#11778):
            # https://github.com/google/oss-fuzz/issues/11778
            export CFLAGS="$CFLAGS -fno-sanitize=function"
        else
            echo " > for aflpp-like"
            export AFL_USE_UBSAN=1
            # Disable "function" sanitizer for C code for now, because many projects,
            # possibly via legacy C code are affected.
            # The projects should be fixed and this workaround be removed in the future.
            # TODO(#11778):
            # https://github.com/google/oss-fuzz/issues/11778
            export CFLAGS="$CFLAGS -fno-sanitize=function"
        fi
    fi
    if [ "$sanitizer" == "coverage" ] ; then 
        echo "SETTING LLVMCOV"
        export CFLAGS="-fprofile-instr-generate -fcoverage-mapping -Wl -fprofile-instr-generate -fsanitize=fuzzer-no-link $CFLAGS"
        export CXXFLAGS="-fprofile-instr-generate -fcoverage-mapping -Wl -fprofile-instr-generate -fsanitize=fuzzer-no-link $CFLAGS"
    fi
    if [ "$sanitizer" == "enumcoverage" ] ; then 
        echo "SETTING ENUMCOV"
        export ENUMETRIC_DUMP=1
    fi
    if [ "$sanitizer" == "debug" ] ; then 
        echo "SETTING DEBUG"
        export CFLAGS="-g -01 -fno-optimize-sibling-calls $CFLAGS"
        export CXXFLAGS="-g -01 -fno-optimize-sibling-calls $CFLAGS"
    fi
done

if [ "${COMPILER:-aflpp}" == "aflppdouble" ] ; then 
    if [ "${BUILDTYPE:-enumetric}" == "enumetric" ] ; then 
        echo "BUILD ENUMETRIC"
        export ENUMETRIC=1
        export SINGLE_CTX=1
    fi
    if [ "${BUILDTYPE:-enumetric}" == "enumetric++" ] ; then 
        echo "BUILD ENUMETRIC++"
        export ENUMETRIC=1
    fi
    if [ "${BUILDTYPE:-enumetric}" == "enumetricbb++" ] ; then 
        echo "BUILD ENUMETRICBB++"
        export ENUMETRIC=1
        export TRANS_TYPE_CTX_BB=1
    fi
    if [ "${BUILDTYPE:-enumetric}" == "enumetric_full" ] ; then 
        echo "BUILD ENUMETRICFULL"
        export ENUMETRIC=1
        export FULL_TRANS_CTX_BB=1
    fi
fi

# Provide a way to document the AFL++ options used in this build:
echo
echo AFL++ target compilation setup:
env | egrep '^AFL_' | tee "$OUT/afl_options.txt"
echo

popd > /dev/null

echo " done."
echo "---------------------------------------------------------------"

sysctl -w vm.mmap_rnd_bits=28

if [ "${FUZZINGMODE:-persistent}" == "persistent" ] ; then 
    echo "SETTING FOR PERSISTENT MODE e.g. -fsanitize=fuzzer"
    # only applied on plan compilation e.g. with clang and not aflpp like
    export CFLAGS="-fsanitize=fuzzer $CFLAGS"
    export CXXFLAGS="-fsanitize=fuzzer $CFLAGS"
else
    echo "SETTING FOR FORLMODE e.g. without -fsanitize=fuzzer"
fi


# Copy latest llvm-symbolizer in $OUT for stack symbolization.
cp $(which llvm-symbolizer-13) $OUT/

echo "---------------------------------------------------------------"
echo "CC=$CC"
echo "CXX=$CXX"
echo "CFLAGS=$CFLAGS"
echo "CXXFLAGS=$CXXFLAGS"
echo ""
echo "$(env)"
echo ""
echo "---------------------------------------------------------------"

BUILD_CMD="bash -eux $SRC/build.sh"

# Set +u temporarily to continue even if GOPATH and OSSFUZZ_RUSTPATH are undefined.
set +u
# We need to preserve source code files for generating a code coverage report.
# We need exact files that were compiled, so copy both $SRC and $WORK dirs.
COPY_SOURCES_CMD="cp -rL --parents $SRC $WORK /usr/include /usr/local/include $GOPATH $OSSFUZZ_RUSTPATH /rustc $OUT"
set -u

if [ "${BUILD_UID-0}" -ne "0" ]; then
  adduser -u $BUILD_UID --disabled-password --gecos '' builder
  chown -R builder $SRC $OUT $WORK
  su -c "$BUILD_CMD" builder
  if [[ $SANITIZERS == *"coverage"* ]]; then
      echo "COPY source files"
      su -c "$COPY_SOURCES_CMD" builder 2>/dev/null || true
  fi
else
#   $BUILD_CMD
  if [[ $SANITIZERS == *"coverage"* ]]; then
    echo "COPY source files"
    $COPY_SOURCES_CMD 2>/dev/null || true
  fi
fi