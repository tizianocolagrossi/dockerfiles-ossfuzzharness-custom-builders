#!/bin/bash -eu
# Copyright 2016 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################

# If LLVM once again does weird changes then enable this:
#export AFL_LLVM_INSTRUMENT=LLVM-NATIVE


echo "Do nothing sonce clang is default"

# No leak errors during builds.
export ASAN_OPTIONS="detect_leaks=0:symbolize=0:detect_odr_violation=0:abort_on_error=1"

# used to run SGRUZZ INTRUMENTATION
export BUILD_SGFUZZER=1
export SGFUZZ_INSTRUMENT_RUTINE="/src/SGFuzz/sanitizer/State_machine_instrument.py"
export CFLAGS_SANITIZERS=""

for sanitizer in $SANITIZERS ; do
    if [ "$sanitizer" == "asan" ] ; then 
        echo "SETTING ASAN"
        # only applied on plan compilation e.g. with clang and not aflpp like
        export CFLAGS="-fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls $CFLAGS"
        export CXXFLAGS="-fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls $CFLAGS"
        export CFLAGS_SANITIZERS="-fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls $CFLAGS_SANITIZERS"
    fi
    if [ "$sanitizer" == "ubsan" ] ; then 
        echo "SETTING UBSAN"
        # only applied on plan compilation e.g. with clang and not aflpp like
        export CFLAGS="-fsanitize=undefined -fno-optimize-sibling-calls $CFLAGS"
        export CXXFLAGS="-fsanitize=undefined -fno-optimize-sibling-calls $CFLAGS"
        export CFLAGS_SANITIZERS="-fsanitize=undefined -fno-optimize-sibling-calls $CFLAGS_SANITIZERS"
        # Disable "function" sanitizer for C code for now, because many projects,
        # possibly via legacy C code are affected.
        # The projects should be fixed and this workaround be removed in the future.
        # TODO(#11778):
        # https://github.com/google/oss-fuzz/issues/11778
        export CFLAGS="$CFLAGS -fno-sanitize=function"
    fi
    if [ "$sanitizer" == "coverage" ] ; then 
        echo "SETTING LLVMCOV"
        export CFLAGS="-fprofile-instr-generate -fcoverage-mapping -Wl -fprofile-instr-generate -fsanitize=fuzzer-no-link $CFLAGS"
        export CXXFLAGS="-fprofile-instr-generate -fcoverage-mapping -Wl -fprofile-instr-generate -fsanitize=fuzzer-no-link $CFLAGS"
        export CFLAGS_SANITIZERS="-fprofile-instr-generate -fcoverage-mapping -Wl -fprofile-instr-generate $CFLAGS_SANITIZERS"
    fi
    if [ "$sanitizer" == "debug" ] ; then 
        echo "SETTING DEBUG"
        export CFLAGS="-g -O1 -fno-optimize-sibling-calls $CFLAGS"
        export CXXFLAGS="-g -O1 -fno-optimize-sibling-calls $CFLAGS"
        export CFLAGS_SANITIZERS="-g -O1 -fno-optimize-sibling-calls $CFLAGS_SANITIZERS"
    fi
done


echo " done."
echo "---------------------------------------------------------------"

sysctl -w vm.mmap_rnd_bits=28

# seems that libfuzzer require -fsanitize=fuzzer-no-link also in fork mode 

export LIB_FUZZING_ENGINE="/usr/lib/libsFuzzer.a"
# only applied on plan compilation e.g. with clang and not aflpp like
export CFLAGS="-fsanitize=fuzzer-no-link -lsFuzzer $CFLAGS"
export CXXFLAGS="-fsanitize=fuzzer-no-link -lsFuzzer $CFLAGS"

# Copy latest llvm-symbolizer in $OUT for stack symbolization.
cp $(which llvm-symbolizer-10) $OUT/

echo "---------------------------------------------------------------"
echo "CC=$CC"
echo "CXX=$CXX"
echo "CFLAGS=$CFLAGS"
echo "CXXFLAGS=$CXXFLAGS"
echo "CFLAGS_SANITIZERS=$CFLAGS_SANITIZERS"
echo "---------------------------------------------------------------"

BUILD_CMD="bash -eux $SRC/build.sh"

# Set +u temporarily to continue even if GOPATH and OSSFUZZ_RUSTPATH are undefined.
set +u
# We need to preserve source code files for generating a code coverage report.
# We need exact files that were compiled, so copy both $SRC and $WORK dirs.
COPY_SOURCES_CMD="cp -rL --parents $SRC $WORK /usr/include /usr/local/include $GOPATH $OSSFUZZ_RUSTPATH /rustc $OUT"
set -u

if [ "${BUILD_UID-0}" -ne "0" ]; then
  adduser -u $BUILD_UID --disabled-password --gecos '' builder
  chown -R builder $SRC $OUT $WORK
  su -c "$BUILD_CMD" builder
  if [[ $SANITIZERS == *"coverage"* ]] || [[ $SANITIZERS == *"debug"* ]] ; then
      echo "COPY source files"
      su -c "$COPY_SOURCES_CMD" builder 2>/dev/null || true
  fi
else
#   $BUILD_CMD
  if [[ $SANITIZERS == *"coverage"* ]] || [[ $SANITIZERS == *"debug"* ]] ; then
    echo "COPY source files"
    $COPY_SOURCES_CMD 2>/dev/null || true
  fi
fi