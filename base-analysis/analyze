#!/bin/bash 


# for d in /home/tiziano/Documents/new-docker-run/new_evluation-v0.2.6tmp3/xpdf-v4.00/regression_v4.00/* ; do ./analize.sh $d /home/tiziano/sut-docker/v0.2.6tmp6/xpdf-v4.00/analysis/fuzz_pdfload /home/tiziano/sut-docker/v0.2.6tmp6/xpdf-v4.00/enumetricbb++/fuzz_pdfload ; done;
# for d in /home/tiziano/Documents/new-docker-run/new_evluation-v0.2.6tmp3/xpdf-v4.00/regression_v4.01/* ; do ./analize.sh $d /home/tiziano/sut-docker/v0.2.6tmp6/xpdf-v4.01/analysis/fuzz_pdfload /home/tiziano/sut-docker/v0.2.6tmp6/xpdf-v4.01/enumetricbb++/fuzz_pdfload ; done;
# for d in /home/tiziano/Documents/new-docker-run/new_evluation-v0.2.6tmp3/xpdf-v4.00/regression_v4.02/* ; do ./analize.sh $d /home/tiziano/sut-docker/v0.2.6tmp6/xpdf-v4.02/analysis/fuzz_pdfload /home/tiziano/sut-docker/v0.2.6tmp6/xpdf-v4.02/enumetricbb++/fuzz_pdfload ; done;
# for d in /home/tiziano/Documents/new-docker-run/new_evluation-v0.2.6tmp3/xpdf-v4.00/regression_v4.03/* ; do ./analize.sh $d /home/tiziano/sut-docker/v0.2.6tmp6/xpdf-v4.03/analysis/fuzz_pdfload /home/tiziano/sut-docker/v0.2.6tmp6/xpdf-v4.03/enumetricbb++/fuzz_pdfload ; done;
# for d in /home/tiziano/Documents/new-docker-run/new_evluation-v0.2.6tmp3/xpdf-v4.00/regression_v4.04/* ; do ./analize.sh $d /home/tiziano/sut-docker/v0.2.6tmp6/xpdf-v4.04/analysis/fuzz_pdfload /home/tiziano/sut-docker/v0.2.6tmp6/xpdf-v4.04/enumetricbb++/fuzz_pdfload ; done;
# for d in /home/tiziano/Documents/new-docker-run/new_evluation-v0.2.6tmp3/xpdf-v4.00/regression_v4.05/* ; do ./analize.sh $d /home/tiziano/sut-docker/v0.2.6tmp6/xpdf-v4.05/analysis/fuzz_pdfload /home/tiziano/sut-docker/v0.2.6tmp6/xpdf-v4.05/enumetricbb++/fuzz_pdfload ; done;


################################################################################################################################################################################################

sysctl -w vm.mmap_rnd_bits=28

# export AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1
# export AFL_SKIP_CPUFREQ=1
# export AFL_TRY_AFFINITY=1
# export AFL_FAST_CAL=1
# export AFL_CMPLOG_ONLY_NEW=1
# export AFL_FORKSRV_INIT_TMOUT=30000
# export AFL_IGNORE_PROBLEMS=1
# export AFL_IGNORE_UNKNOWN_ENVS=1

# Destination directory where the symbolic links will be created
for l in $DEDUP_BUILD/lib*; do echo $l; ln -s $(realpath $l) /lib/x86_64-linux-gnu/ ; done

export PATH=$OUT:$PATH
cd $OUT

FUZZER=$1
shift

QUEUE_TEST_CASE=$FUZZ_OUT/queue/*
CRASHES=$FUZZ_OUT/crashes/


# entry unzip 
pushd $FUZZ_OUT
unzip  fuzz_out.zip

ls

if [ -d "./default" ]; then
    echo "AFL like output detected moved."
    QUEUE_TEST_CASE="$FUZZ_OUT/default/queue/*"
    rm -r $FUZZ_OUT/default/crashes/README.txt
    CRASHES="$FUZZ_OUT/default/crashes/"
    cp ./default/fuzzer_stats .
    cp ./default/plot_data .
fi

popd 

# Ensure timeout is a bit larger than 1sec as some of the OSS-Fuzz fuzzers
# are slower than this.
LIBAFL_FUZZER_ARGS="-t 5000"

# remember in install_deps.sh vv
# ln -s $SRC/BAAFLTriage/target/release/baafltriage /usr/local/bin/afltriage
# CMD_LINE_DEDUP_CRASH_5="afltriage -i $CRASHES -o $FUZZ_OUT/afltriageout-first_5_frames --report-formats=text,json --bucket-strategy first_5_frames -t 15000 -- $DEDUP_BUILD/$FUZZER @@"
# CMD_LINE_DEDUP_CRASH_1="afltriage -i $CRASHES -o $FUZZ_OUT/afltriageout-first_frame --report-formats=text,json --bucket-strategy first_frame -t 15000 -- $DEDUP_BUILD/$FUZZER @@"
if [[ ! -d $FUZZ_OUT/afltriageout-first_frame ]]; then
    afltriage -i $CRASHES -o $FUZZ_OUT/afltriageout-first_frame --report-formats=text,json --bucket-strategy first_frame -t 15000 -- $DEDUP_BUILD/$FUZZER @@
fi


if [ "$COVERAGE_PROFILE" = "true" ]; then
    echo "Running for enumprofile"
    export ENUM_PROFILE_FILE="$FUZZ_OUT/default_enumprofile.csv"
    $OUT/afl-enumetric-dumper-bitmapshared &
    bitmapshared_pid=$!
    echo "afl-enumetric-dumper-bitmapshared launched with pid $bitmapshared_pid"
    sleep 2

    for testcase in $QUEUE_TEST_CASE; do
        echo "running $testcase"
        testcase_name=$(basename "$testcase")
        LLVM_PROFILE_FILE="coverage_$testcase_name.profraw" $OUT/$FUZZER $testcase
    done

    sleep 2
    kill $bitmapshared_pid

    # llvm-profdata-13 merge -sparse coverage_*.profraw -o coverage.profdata

    ls coverage_*.profraw | xargs -n 100 -I {} llvm-profdata-13 merge -sparse {} -o temp_coverage_{}.profdata
    llvm-profdata-13 merge -sparse temp_coverage_*.profdata -o coverage.profdata

    llvm-cov-13 export --format=text --instr-profile ./coverage.profdata $OUT/$FUZZER > $FUZZ_OUT/llvmcov.json

    python3 -c "import sys, json; fdfull = open('$FUZZ_OUT/llvmcov.json', 'r'); data = json.load(fdfull); fdfull.close(); fd = open('$FUZZ_OUT/llvmcov_total.json', 'w+'); json.dump(data['data'][0]['totals'], fd); fd.close()"
fi


if [ -d "./default" ]; then
    cp ./default/fuzzer_stats .
    cp ./default/plot_data .
fi

# on exit delete unnecessary data
chown -R $OUTUID:$OUTGID $FUZZ_OUT
cd $FUZZ_OUT
rm -rf ./default
rm -rf ./queue 
rm -rf ./hangs 
rm -rf ./crashes
rm -rf ./.synced
rm -rf ./fuzzer_setup
rm -rf ./fuzz_bitmap
rm -rf ./cmdline
rm -rf ./coverage_*.profraw
rm -rf ./coverage.profdata
rm -rf ./*.profraw.profdata
rm -rf $OUT/*.profraw.profdata
rm -rf $OUT/coverage_*.profraw
rm -rf $OUT/coverage.profdata
