#! /bin/bash

RAMMAX=4g
WRITEMAX=4g

#docker-run-cpu-affinity --rm -v ~/sut-docker/xpdf-v4.00/baseline/:/out -v ~/outputs/pdfload-xpdf-v4.00_baseline-cmplog-$id:/fuzz_out -e FUZZING_ENGINE=libafl -e TIMEOUT=5m -t oss-base-runner run_fuzzer fuzz_pdfload
DUMMY=1
if [ -n "$1" ] ; then
    if [ "$1" == "--no-dummy" ] ; then
        DUMMY=0
    fi
fi

# cat /sys/devices/system/cpu/cpu0/topology/thread_siblings_list

get_cpu_siblings() {
    local cpuid=$1
    cat /sys/devices/system/cpu/cpu"$cpuid"/topology/thread_siblings_list
}

perform_task() {
    fuzzer=$1
    shift
    fuzzer_dir=$1
    shift
    output_dir=$1
    shift
    runs=$1
    shift
    cor_start=$1
    shift
    timeout=$1
    shift
    min_start=$1
    shift
    
    ls $fuzzer_dir > /dev/null
    if [[ ! $? -eq 0 ]]; then
	echo "ERROR $fuzzer_dir do not exist"
	exit 1
    fi
    ls $fuzzer_dir/$fuzzer > /dev/null
    if [[ ! $? -eq 0 ]]; then
        echo "ERROR $fuzzer not present in $fuzzer_dir"
        exit 1
    fi
    # Loop from core_start to core_end
    for counter in $(seq 1 ${runs}); do
        minutes=$(($counter+$min_start-1))
        core_id=$(($counter+$cor_start-1))
        if [ $DUMMY == 1 ] ; then
            #dummy
            echo "docker run --cpuset-cpus="$(get_cpu_siblings $core_id)" --memory="$RAMMAX" --detach --rm -v ${output_dir}-${counter}:/fuzz_out -v ${fuzzer_dir}:/out -e FUZZING_ENGINE=libafl -e TIMEOUT=$timeout -e OUTUID=$(id -u) -e OUTGID=$(id -g) -e CPU_ID_BIND=0 -t osvaldo/oss-base-runner run_fuzzer $fuzzer $*"
        else
            #real
            echo "docker run --cpuset-cpus="$(get_cpu_siblings $core_id)" --memory="$RAMMAX" --detach --rm -v ${output_dir}-${counter}:/fuzz_out -v ${fuzzer_dir}:/out -e FUZZING_ENGINE=libafl -e TIMEOUT=$timeout -e OUTUID=$(id -u) -e OUTGID=$(id -g) -e CPU_ID_BIND=0 -t osvaldo/oss-base-runner run_fuzzer $fuzzer $*"   | at now + $minutes min
        fi
    done
}


convert_to_minutes() {
    local time_str="$1"
    
    # Extract numeric part and unit
    local num="${time_str//[!0-9]/}"
    local unit="${time_str//[0-9]/}"

    # Convert num to an integer
    num=$((num))

    # Calculate minutes based on the unit
    case "$unit" in
        "h") minutes=$((num * 60)) ;;
        "m") minutes=$((num)) ;;
        "s") minutes=$((num / 60)) ;;
        *) echo "Invalid unit"; return 1 ;;
    esac

    echo "$minutes"
}

TIMEOUT="24h"
DELTA="15"
RUN="3"

TIME_UNIT=$(convert_to_minutes $TIMEOUT)
TIME_UNIT=$(($TIME_UNIT+$DELTA))

# #             fuzzer       fuzz_dir                          out_dir_prefx                                run timeout  min_start additional_options
# #perform_task fuzz_pdfload ~/sut-docker/xpdf-v4.00/baseline/ ~/outputs/pdfload-xpdf-v4.00_baseline-cmplog 5   5m       1         -c

ROUND_TIME=$((TIME_UNIT * 0))
perform_task fuzz_dtlsserver ~/sut-docker/v0.2.6tmp0/mbedtls-e483a7/baseline/ ~/outputs/mbedtls-e483a7_baseline_cmplog $RUN 0 $TIMEOUT $ROUND_TIME -c
# perform_task fuzz_dtlsserver ~/sut-docker/v0.2.6tmp0/mbedtls-e483a7/baseline/ ~/outputs/mbedtls-e483a7_baseline $RUN 3 $TIMEOUT $ROUND_TIME 
# perform_task fuzz_dtlsserver ~/sut-docker/v0.2.6tmp0/mbedtls-e483a7/enumetric/ ~/outputs/mbedtls-e483a7_enumetric_cmplog $RUN 6 $TIMEOUT $ROUND_TIME -c


# ROUND_TIME=$((TIME_UNIT * 1))
# perform_task fuzz_dtlsserver ~/sut-docker/v0.2.6tmp0/mbedtls-e483a7/enumetric/ ~/outputs/mbedtls-e483a7_enumetric $RUN 0 $TIMEOUT $ROUND_TIME 
# perform_task fuzz_dtlsserver ~/sut-docker/v0.2.6tmp0/mbedtls-e483a7/enumetric++/ ~/outputs/mbedtls-e483a7_enumetric++_cmplog $RUN 3 $TIMEOUT $ROUND_TIME -c
# perform_task fuzz_dtlsserver ~/sut-docker/v0.2.6tmp0/mbedtls-e483a7/enumetric++/ ~/outputs/mbedtls-e483a7_enumetric++ $RUN 6 $TIMEOUT $ROUND_TIME 


# ROUND_TIME=$((TIME_UNIT * 2))
# perform_task fuzz_dtlsserver ~/sut-docker/v0.2.6tmp0/mbedtls-e483a7/enumetricbb++/ ~/outputs/mbedtls-e483a7_enumetricbb++_cmplog $RUN 0 $TIMEOUT $ROUND_TIME -c
# perform_task fuzz_dtlsserver ~/sut-docker/v0.2.6tmp0/mbedtls-e483a7/enumetricbb++/ ~/outputs/mbedtls-e483a7_enumetricbb++ $RUN 3 $TIMEOUT $ROUND_TIME 
# perform_task FuzzTarget ~/sut-docker/v0.2.6tmp0/pcapplusplus-a817631/baseline/ ~/outputs/pcapplusplus-a817631_baseline_cmplog $RUN 6 $TIMEOUT $ROUND_TIME -c


# ROUND_TIME=$((TIME_UNIT * 3))
# perform_task FuzzTarget ~/sut-docker/v0.2.6tmp0/pcapplusplus-a817631/baseline/ ~/outputs/pcapplusplus-a817631_baseline $RUN 0 $TIMEOUT $ROUND_TIME 
# perform_task FuzzTarget ~/sut-docker/v0.2.6tmp0/pcapplusplus-a817631/enumetric/ ~/outputs/pcapplusplus-a817631_enumetric_cmplog $RUN 3 $TIMEOUT $ROUND_TIME -c
# perform_task FuzzTarget ~/sut-docker/v0.2.6tmp0/pcapplusplus-a817631/enumetric/ ~/outputs/pcapplusplus-a817631_enumetric $RUN 6 $TIMEOUT $ROUND_TIME 


# ROUND_TIME=$((TIME_UNIT * 4))
# perform_task FuzzTarget ~/sut-docker/v0.2.6tmp0/pcapplusplus-a817631/enumetric++/ ~/outputs/pcapplusplus-a817631_enumetric++_cmplog $RUN 0 $TIMEOUT $ROUND_TIME -c
# perform_task FuzzTarget ~/sut-docker/v0.2.6tmp0/pcapplusplus-a817631/enumetric++/ ~/outputs/pcapplusplus-a817631_enumetric++ $RUN 3 $TIMEOUT $ROUND_TIME 
# perform_task FuzzTarget ~/sut-docker/v0.2.6tmp0/pcapplusplus-a817631/enumetricbb++/ ~/outputs/pcapplusplus-a817631_enumetricbb++_cmplog $RUN 6 $TIMEOUT $ROUND_TIME -c


# ROUND_TIME=$((TIME_UNIT * 5))
# perform_task FuzzTarget ~/sut-docker/v0.2.6tmp0/pcapplusplus-a817631/enumetricbb++/ ~/outputs/pcapplusplus-a817631_enumetricbb++ $RUN 0 $TIMEOUT $ROUND_TIME 

get_cpu_siblings 1